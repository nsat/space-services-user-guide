#!/usr/bin/python3

import argparse
import json
from time import sleep, time

from oort_sdk_client.api.sdk_api import SdkApi
from oort_sdk_client.models import AdcsCommandRequest

MODE = "TRACK"
LATLON_ERR_DEG = 1
POLL_INTERVAL_SECS = 5

def assert_tracking(hk, mode, lat, lon):
    if hk.acs_mode_active == mode \
        and abs(hk.latlontrack_lat - lat) < LATLON_ERR_DEG \
        and abs(hk.latlontrack_lon - lon) < LATLON_ERR_DEG:
        return True

    raise Exception("No longer tracking target. " + 
        "Expected: ({},{},{}), " + 
        "Actual: ({},{},{})".format(mode, lat, lon, 
            hk.acs_mode_active, hk.latlontrack_lat, hk.latlontrack_lon))


def main(lat, lon, window_end):
    agent = SdkApi()

    print("Starting TFRS", json.dumps(agent.get_tfrs().__dict__))
    print("Starting ADCS", json.dumps(agent.get_adcs().__dict__))

    print("Requesting tracking to", lat, lon)

    cmd = AdcsCommandRequest(command="TRACK", aperture="IPI", target=(lat, lon))
    res = agent.command_adcs(cmd)

    print("Result:", json.dumps(res.__dict__))

    sleep(POLL_INTERVAL_SECS)
    adcs = agent.get_adcs()
    last_err_angle = 180

    # poll for the attitude until reached or it stops moving
    while assert_tracking(adcs.hk, MODE< lat, lon) \
        and adcs.hk.control_error_angle_deg < last_err_angle:
        if time() < window_end:
            raise TimeoutError("Slew timout. Currently ({}, {})".format(
                adcs.hk.latlontrack_lat, 
                adcs.hk.latlontrack_lon))

        sleep(POLL_INTERVAL_SECS)
        last_err_angle = adcs.hk.control_error_angle_deg
        adcs = agent.get_adcs()

    print("Slewing stopped at (", adcs.hk.latlontrack_lat, ",", adcs.hk.latlontrack_lon,
        "), accuracy:" , adcs.hk.control_error_angle_deg, "degrees")

    # TODO: Take photo



if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('window_end', nargs='?', type=int, help='Window end time, in epoch seconds, i.e. ' + str(int(time())))
    parser.add_argument('lat', nargs='?', type=float, help='Latitude to track', default=37.771034)
    parser.add_argument('lon', nargs='?', type=float, help='Longitude to track', default=-122.413815)
    exit(main(**vars(parser.parse_args())))